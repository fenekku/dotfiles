---
# Couple notes:
#
# - ansible.builtin.shell uses /bin/sh by default
#   and nothing seems to be loaded
# - if the fish executable is used for the shell,
#   then .config/fish/config.fish is loaded
#

- name: "Pop_OS machine setup"
  hosts: localhost
  connection: local
  gather_facts: true
  vars:
    python_version: "3.12"
    node_version: "20.11"  # TODO: make it so latest LTS installed
    fish_path: /usr/bin/fish
  tasks:
    - name: Debug
      ansible.builtin.debug:
        msg: "{{ ansible_env }}"

    - name: Get my user
      ansible.builtin.set_fact:
        remote_regular_user: "{{ ansible_user_id }}"

    - name: Install packages
      become: true
      ansible.builtin.apt:
        cache_valid_time: 3600
        name:
          # Development
          - build-essential
          - libssl-dev
          - zlib1g-dev
          - libbz2-dev
          - libreadline-dev
          - libsqlite3-dev
          - llvm
          - libncurses5-dev
          - libncursesw5-dev
          - tk-dev
          - curl
          - emacs-nox
          - liblzma-dev
          - git-core
          # Alternative package installer
          - gdebi-core
          - apt-transport-https
          - ca-certificates
          - software-properties-common
          # Python
          - python3-apt
          - python3-venv
          - python3-pip
          - python3-gpg
          # Nice tools
          - zoxide
          # Misc
          - gnome-tweaks
        state: present
      tags:
        - packages

    - name: Install VSCode
      # VSCode - START
      # wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
      # sudo install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/
      # sudo sh -c 'echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list'
      # rm -f packages.microsoft.gpg
      block:
        - name: Import Microsoft GPG Key
          become: yes
          ansible.builtin.get_url:
            url: https://packages.microsoft.com/keys/microsoft.asc
            dest: /etc/apt/trusted.gpg.d/
            # TODO: add correct checksum
            # checksum: sha256:bb42f0db45d46bab5f9ec619e1a47360b94c27142e57aa71f7050d08672309e0

        - name: Add Visual Studio Code ppa
          become: yes
          ansible.builtin.apt_repository:
            repo: "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/microsoft.asc] https://packages.microsoft.com/repos/code stable main"
            state: present

        - name: Install VS Code
          become: yes
          ansible.builtin.apt:
            name: code
            state: present

    - name: Create folder structure
      block:
        - name: dev folder
          ansible.builtin.file:
            path: "{{ ansible_env.HOME }}/dev"
            state: directory

        - name: Packages folder
          ansible.builtin.file:
            path: "{{ ansible_env.HOME }}/Downloads/Packages"
            state: directory

    - name: Install Synology Drive Client
      block:
        - name: Download client
          ansible.builtin.get_url:
            url: https://global.synologydownload.com/download/Utility/SynologyDriveClient/3.4.0-15724/Ubuntu/Installer/synology-drive-client-15724.x86_64.deb
            dest: "{{ ansible_env.HOME }}/Downloads/Packages"

        - name: Install client
          become: true
          ansible.builtin.apt:
            deb: "{{ ansible_env.HOME }}/Downloads/Packages/synology-drive-client-15724.x86_64.deb"

        - name: Launch Synology Drive client reminder
          ansible.builtin.debug:
            msg: "Don't forget to launch Synology Drive at least once to set it up!"

    - name: Setup fish
      block:
        - name: Add fish ppa
          become: true
          ansible.builtin.apt_repository:
            repo: ppa:fish-shell/release-3

        - name: Install fish
          become: true
          ansible.builtin.apt:
            name: fish
            state: present

        - name: Install sharship prompt
          block:
            - name: Download starship install script
              ansible.builtin.get_url:
                url: https://starship.rs/install.sh
                dest: /tmp/starship_install.sh

            - name: Make starship install script executable
              ansible.builtin.file:
                path: /tmp/starship_install.sh
                mode: '+x'

            - name: Run starship install script
              become: true
              ansible.builtin.shell:
                cmd: /tmp/starship_install.sh --yes

        - name: Change shell to fish
          become: true
          ansible.builtin.user:
            name: "{{ remote_regular_user }}"
            shell: "{{ fish_path }}"

        - name: Check if fisher installed
          ansible.builtin.shell:
            cmd: fisher --version
            executable: "{{ fish_path }}"
          register: fisher_installed
          ignore_errors: true

        - name: Install fisher
          when: fisher_installed is failed
          ansible.builtin.shell:
            cmd: curl -sL https://raw.githubusercontent.com/jorgebucaran/fisher/main/functions/fisher.fish | source && fisher install jorgebucaran/fisher
            executable: "{{ fish_path }}"


    # TODO: install git-split-diffs


    - name: Setup Python
      block:
        - name: Check if pyenv is installed
          ansible.builtin.shell:
            cmd: bash -lc "pyenv --version"
          register: pyenv_installed
          ignore_errors: true
          changed_when: false  # what does it do?

        - name: Install pyenv because not installed
          when: pyenv_installed is failed
          ansible.builtin.shell:
            cmd: curl https://pyenv.run | bash

        - name: Write required .profile changes
          ansible.builtin.blockinfile:
            path: ~/.profile
            block: |
              export PYENV_ROOT="$HOME/.pyenv"
              [[ -d $PYENV_ROOT/bin ]] && export PATH=$PYENV_ROOT/bin:$PATH
              eval "$(pyenv init -)"

        - name: Install Python {{ python_version }}
          when: pyenv_installed is failed
          ansible.builtin.shell:
            cmd: pyenv install {{ python_version }}
          register: python_installed

        - name: Set python {{ python_version }} as the global version
          when: pyenv_installed is failed
          ansible.builtin.shell:
            cmd: pyenv global {{ python_version}}

        - name: Upgrade pip
          ansible.builtin.shell:
            cmd: pip install --upgrade pip
          become: true

        # Only for Ubuntu 22.04 and below, but should be fine for above too
        - name: Install pipx
          ansible.builtin.shell:
            cmd: python3 -m {{ item }}
          with_items:
            - pip install --user pipx

        - name: Install pipenv
          ansible.builtin.shell:
            cmd: bash -lc "pipx install pipenv"

    - name: Install node
      block:
        - name: Check if node installed
          ignore_errors: true
          ansible.builtin.shell:
            cmd: node --version
            executable: "{{ fish_path }}"
          register: node_installed

        - name: Check if nvm installed
          ignore_errors: true
          ansible.builtin.shell:
            cmd: nvm --version
          register: nvm_installed

        - name: Install nvm
          when: nvm_installed is failed
          ansible.builtin.shell:
            cmd: fisher install jorgebucaran/nvm.fish

        - name: Install Node {{ node_version }}
          when: node_installed is failed
          ansible.builtin.shell:
            cmd: |
              nvm install {{ node_version }}
              nvm use {{ nove_version }}

    - name: Install gh
      when: false
      block:
        - name: Import GPG Key
          ansible.builtin.get_url:
            url: https://cli.github.com/packages/githubcli-archive-keyring.gpg
            dest: /etc/apt/trusted.gpg.d/

        - name: Add ppa
          ansible.builtin.apt_repository:
            repo: "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main"
            state: present

        - name: Install
          ansible.builtin.apt:
            name: code
            state: present

    # TODO: install docker
    # - name: Install Docker
    #   block:
    #     - name: Import Docker GPG key
    #       ansible.builtin.get_url:
    #         url: https://download.docker.com/linux/ubuntu/gpg
    #         dest: /etc/apt/trusted.gpg.d/docker.asc
    #         # TODO: add correct checksum
    #         # checksum: sha256:bb42f0db45d46bab5f9ec619e1a47360b94c27142e57aa71f7050d08672309e0

    #     - name: Add Docker ppa
    #       ansible.builtin.apt_repository:
    #         # or UBUNTU_CODENAME
    #         repo: "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable"
    #         state: present

        # - name: Install docker
        #   ansible.builtin.apt:
        #     name: docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
        #     state: present

        # - name: Add Docker group
        #   ansible.builtin.group:
        #     name: docker
        #     state: present

        # - name: Add user to docker group
        #   ansible.builtin.user:
        #     name: "{{ remote_regular_user }}"
        #     groups: docker
        #     append: true

    # Install ulauncher - START
    # commented out for now since pop_os may have launcher already
    # - name: Add ulauncher ppa
    #   ansible.builtin.apt_repository:
    #     repo: ppa:agornostal/ulauncher

    # - name: Install ulauncher
    #   ansible.builtin.apt:
    #     name: ulauncher
    #     state: present
    # Install ulauncher - END

    # sudo apt autoremove

    # LEFTOVERS
    # - name: Install DNF plugins core
    #   ansible.builtin.dnf:
    #     name: dnf-plugins-core
    #     state: present

    # - name: Add Brave Browser Repo
    #   ansible.builtin.yum_repository:
    #     name: brave-browser
    #     description: Brave Browser
    #     baseurl: https://brave-browser-rpm-release.s3.brave.com/x86_64/
    #     gpgkey: https://brave-browser-rpm-release.s3.brave.com/brave-core.asc
    #     gpgcheck: true
    #     enabled: true

    # - name: Import Brave Browser GPG Key
    #   ansible.builtin.rpm_key:
    #     key: https://brave-browser-rpm-release.s3.brave.com/brave-core.asc
    #     state: present

    # - name: Install Brave Browser
    #   ansible.builtin.dnf:
    #     name: brave-browser
    #     state: present

    # - name: Add rtx config manager
    #   ansible.builtin.yum_repository:
    #     name: rtx
    #     description: RTX Repo
    #     baseurl: https://rtx.pub/rpm
    #     gpgkey: https://rtx.pub/gpg-key.pub
    #     gpgcheck: true
    #     enabled: true

    # - name: Install RTX
    #   ansible.builtin.dnf:
    #     name: rtx
    #     state: present

    # - name: Add Hashicorp Repo
    #   ansible.builtin.yum_repository:
    #     name: hashicorp
    #     description: Hashicorp repo
    #     baseurl: https://rpm.releases.hashicorp.com/fedora/$releasever/$basearch/stable
    #     gpgkey: https://rpm.releases.hashicorp.com/gpg
    #     gpgcheck: true
    #     enabled: true

    # - name: Install Terraform
    #   ansible.builtin.dnf:
    #     name: terraform
    #     state: present

    # - name: Check if Pulumi is installed
    #   ansible.builtin.command:
    #     cmd: pulumi version
    #   register: pulumi_installed
    #   ignore_errors: true
    #   changed_when: false

    # - name: Download Pulumi SDK
    #   ansible.builtin.get_url:
    #     url: "https://get.pulumi.com/releases/sdk/pulumi-{{ pulumi_version }}-linux-x64.tar.gz"
    #     dest: "/tmp/pulumi-{{ pulumi_version }}-linux-x64.tar.gz"
    #     mode: "0644"
    #   when: pulumi_installed is failed or pulumi_installed.stdout is not search(pulumi_version)

    # - name: Extract Pulumi to /usr/local/bin
    #   ansible.builtin.unarchive:
    #     src: "/tmp/pulumi-{{ pulumi_version }}-linux-x64.tar.gz"
    #     dest: /usr/local/bin
    #     extra_opts: [--strip-components=1]
    #     creates: /usr/local/bin/pulumi
    #   when: pulumi_installed is failed or pulumi_installed.stdout is not search(pulumi_version)

    # - name: Check if the targeted version of flyctl is installed
    #   ansible.builtin.command: flyctl version
    #   register: installed_flyctl_version
    #   ignore_errors: true
    #   changed_when: false

    # - name: Download flyctl tar.gz
    #   ansible.builtin.get_url:
    #     url: "https://github.com/superfly/flyctl/releases/download/v{{ flyctl_version }}/flyctl_{{ flyctl_version }}_Linux_x86_64.tar.gz"
    #     dest: "/tmp/flyctl_{{ flyctl_version }}_Linux_x86_64.tar.gz"
    #     mode: "0644"
    #   when: flyctl_version not in installed_flyctl_version.stdout

    # - name: Extract flyctl to /usr/local/bin
    #   ansible.builtin.unarchive:
    #     src: "/tmp/flyctl_{{ flyctl_version }}_Linux_x86_64.tar.gz"
    #     dest: "/usr/local/bin"
    #     remote_src: true
    #   when: flyctl_version not in installed_flyctl_version.stdout

    # - name: Install Flatpak packages
    #   community.general.flatpak:
    #     name:
    #       - com.obsproject.Studio
    #       - org.videolan.VLC
    #       - org.tenacityaudio.Tenacity
    #       - md.obsidian.Obsidian
    #       - org.gimp.GIMP
    #       - rest.insomnia.Insomnia
    #       - com.github.johnfactotum.Foliate
    #       - com.jetbrains.PyCharm-Professional
    #       - com.jetbrains.GoLand
    #       - org.gnome.meld
    #       - org.sqlitebrowser.sqlitebrowser
    #     state: present

    # - name: Ensure fonts directory
    #   ansible.builtin.file:
    #     path: "~{{ remote_regular_user }}/.fonts"
    #     state: directory
    #     mode: "0755"
    #     owner: "{{ remote_regular_user }}"

    # - name: Check if Jetbrains Mono exists
    #   ansible.builtin.shell: "ls ~{{ remote_regular_user }}/.fonts/JetBrainsMonoNerd*FontMono*"
    #   register: jetbrains_mono_exists
    #   ignore_errors: true
    #   changed_when: false

    # - name: Download Jetbrains mono
    #   when: jetbrains_mono_exists is failed
    #   ansible.builtin.unarchive:
    #     src: https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/JetBrainsMono.zip
    #     dest: "~{{ remote_regular_user }}/.fonts/"
    #     remote_src: true
    #     mode: "0755"
    #     owner: "{{ remote_regular_user }}"
