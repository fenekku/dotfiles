---
- name: "Ubuntu machine setup"
  hosts: localhost
  connection: local
  gather_facts: true
  vars:
    python_version: "3.12"
  #   flyctl_version: "0.1.130"
  #   pulumi_version: "v3.94.2"

  tasks:
    # - name: Get helpful facts
    # - name: Debug
    #   ansible.builtin.debug:
    #     msg: "{{ ansible_env }}"

    - name: Get my user
      ansible.builtin.set_fact:
        remote_regular_user: "{{ ansible_user_id }}"

    # - name: Debug
    #   ansible.builtin.debug:
    #     msg: "Regular: {{ remote_regular_user }}"

    # Initial comment out
    - name: Install packages
      ansible.builtin.apt:
        name:
          # Development
          - build-essential
          - libssl-dev
          - zlib1g-dev
          - libbz2-dev
          - libreadline-dev
          - libsqlite3-dev
          - llvm
          - libncurses5-dev
          - libncursesw5-dev
          - tk-dev
          - curl
          - emacs-nox
          - liblzma-dev
          - git-core
          # Alternative package installer
          - gdebi-core
          - apt-transport-https
          - ca-certificates
          - software-properties-common
          # Python
          - python3-apt
          - python3-venv
          - python3-pip
          - python3-gpg

          #       - vim
          #       - gh
          #       - gnome-tweaks
          #       - gcc
          #       - helm
          #       - go-task
          #       - ripgrep
          #       - poetry
          #       - zsh
          #       - fzf
          #       - tmux
          #       - ffmpeg-free
          #       - zlib
          #       - zlib-devel
          #       - make
          #       - patch
          #       - bzip2
          #       - bzip2-devel
          #       - readline-devel
          #       - sqlite
          #       - sqlite-devel
          #       - openssl-devel
          #       - tk-devel
          #       - libffi-devel
          #       - xz-devel
          #       - libuuid-devel
          #       - gdbm-libs
          #       - libnsl2
          #       - luarocks
          #       - wl-clipboard
          #       - fd-find
          #       - gcc-c++
          #       - doctl
          #       - helix
          #       - "@Development Tools"
          #       - "@C Development Tools and Libraries"
          #       - ncurses-devel
          #       - wxGTK-devel
          #       - wxBase
          #       - java-1.8.0-openjdk-devel
          #       - libiodbc
          #       - unixODBC-devel.x86_64
          #       - erlang-odbc.x86_64
          #       - libxslt
          #       - fop
          #       - podman-compose
          #       - inotify-tools
          #       - blender
        state: present
      become: true

    # Python stuff - START

    # TODO: tryout on new machine
    - name: Check if pyenv is installed
      ansible.builtin.command:
        cmd: pyenv --version
      register: pyenv_installed
      ignore_errors: true
      changed_when: false  # what does it do?

    - name: Setup pyenv
      when: pyenv_installed is failed
      ansible.builtin.command:
        cmd: wget --quiet https://pyenv.run --output-document=- | bash

    - name: Install Python {{ python_version }}
      when: pyenv_installed is failed
      ansible.builtin.command:
        cmd: pyenv install {{ python_version }}
      register: python_installed

    - name: Set python {{ python_version }} as the global version
      when: pyenv_installed is failed
      ansible.builtin.command:
        cmd: pyenv global {{ python_version}}

    - name: Upgrade pip
      ansible.builtin.command:
        cmd: pip install --upgrade pip
      become: true

    # Only for Ubuntu 22.04 and below, but should be fine for above too
    - name: Install pipx
      ansible.builtin.command:
        cmd: python3 -m {{ item }}
      with_items:
        - pip install --user pipx
        - pipx ensurepath

    - name: Install pipenv
      ansible.builtin.command:
        cmd: pipx install pipenv

    # Python stuff - END


    # Fish stuff - START
    - name: Add fish ppa
      ansible.builtin.apt_repository:
        repo: ppa:fish-shell/release-3

    - name: Install fish
      ansible.builtin.apt:
        name: fish
        state: present

    - name: Change shell to fish
      ansible.builtin.user:
        name: "{{ remote_regular_user }}"
        shell: /usr/bin/fish

    - name: Check if fisher installed
      ansible.builtin.command:
        cmd: fisher --version
      register: fisher_installed
      ignore_errors: true

    - name: Install fisher
      when: fisher_installed is failed
      ansible.builtin.command:
        cmd: curl -sL https://git.io/fisher | source && fisher install jorgebucaran/fisher

    # Fish stuff - END

    # Install ulauncher - START
    # commented out for now since pop_os may have launcher already
    # - name: Add ulauncher ppa
    #   ansible.builtin.apt_repository:
    #     repo: ppa:agornostal/ulauncher

    # - name: Install ulauncher
    #   ansible.builtin.apt:
    #     name: ulauncher
    #     state: present
    # Install ulauncher - END


    # VSCode - START
    wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
    sudo install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/
    sudo sh -c 'echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list'
    rm -f packages.microsoft.gpg

    # - TODO: switch to codium?
    - name: Install VSCode
      block:
        - name: Import Microsoft GPG Key
          ansible.builtin.get_url:
            url: https://packages.microsoft.com/keys/microsoft.asc
            dest: /etc/apt/trusted.gpg.d/
            # TODO: add correct checksum
            # checksum: sha256:bb42f0db45d46bab5f9ec619e1a47360b94c27142e57aa71f7050d08672309e0

        - name: Add Visual Studio Code ppa
          ansible.builtin.apt_repository:
            repo: "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/microsoft.asc] https://packages.microsoft.com/repos/code stable main"
            state: present
        # - name: Add Visual Studio Code Repo
        #   ansible.builtin.yum_repository:
        #     name: vscode
        #     description: Visual Studio Code
        #     baseurl: https://packages.microsoft.com/yumrepos/vscode
        #     gpgkey: https://packages.microsoft.com/keys/microsoft.asc
        #     gpgcheck: true
        #     enabled: true

        - name: Install VS Code
          ansible.builtin.apt:
            name: code
            state: present

    # Commenting out for now
    # - name: Install Docker
    #   block:
    #     - name: Import Docker GPG key
    #       ansible.builtin.get_url:
    #         url: https://download.docker.com/linux/ubuntu/gpg
    #         dest: /etc/apt/trusted.gpg.d/docker.asc
    #         # TODO: add correct checksum
    #         # checksum: sha256:bb42f0db45d46bab5f9ec619e1a47360b94c27142e57aa71f7050d08672309e0

    #     - name: Add Docker ppa
    #       ansible.builtin.apt_repository:
    #         # or UBUNTU_CODENAME
    #         repo: "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable"
    #         state: present

        # - name: Install docker
        #   ansible.builtin.apt:
        #     name: docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
        #     state: present

        # - name: Add Docker group
        #   ansible.builtin.group:
        #     name: docker
        #     state: present

        # - name: Add user to docker group
        #   ansible.builtin.user:
        #     name: "{{ remote_regular_user }}"
        #     groups: docker
        #     append: true


    # TODO: install gh - may be part of main packages
    # curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
    # echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null

    # TODO: install node
    # fisher install jorgebucaran/nvm.fish
    # nvm install $NODE_VERSION
    # nvm use $NODE_VERSION


    # sudo apt autoremove



    # LEFTOVERS
    # - name: Install DNF plugins core
    #   ansible.builtin.dnf:
    #     name: dnf-plugins-core
    #     state: present

    # - name: Add Brave Browser Repo
    #   ansible.builtin.yum_repository:
    #     name: brave-browser
    #     description: Brave Browser
    #     baseurl: https://brave-browser-rpm-release.s3.brave.com/x86_64/
    #     gpgkey: https://brave-browser-rpm-release.s3.brave.com/brave-core.asc
    #     gpgcheck: true
    #     enabled: true

    # - name: Import Brave Browser GPG Key
    #   ansible.builtin.rpm_key:
    #     key: https://brave-browser-rpm-release.s3.brave.com/brave-core.asc
    #     state: present

    # - name: Install Brave Browser
    #   ansible.builtin.dnf:
    #     name: brave-browser
    #     state: present



    # - name: Add rtx config manager
    #   ansible.builtin.yum_repository:
    #     name: rtx
    #     description: RTX Repo
    #     baseurl: https://rtx.pub/rpm
    #     gpgkey: https://rtx.pub/gpg-key.pub
    #     gpgcheck: true
    #     enabled: true

    # - name: Install RTX
    #   ansible.builtin.dnf:
    #     name: rtx
    #     state: present

    # - name: Add Hashicorp Repo
    #   ansible.builtin.yum_repository:
    #     name: hashicorp
    #     description: Hashicorp repo
    #     baseurl: https://rpm.releases.hashicorp.com/fedora/$releasever/$basearch/stable
    #     gpgkey: https://rpm.releases.hashicorp.com/gpg
    #     gpgcheck: true
    #     enabled: true

    # - name: Install Terraform
    #   ansible.builtin.dnf:
    #     name: terraform
    #     state: present

    # - name: Check if Pulumi is installed
    #   ansible.builtin.command:
    #     cmd: pulumi version
    #   register: pulumi_installed
    #   ignore_errors: true
    #   changed_when: false

    # - name: Download Pulumi SDK
    #   ansible.builtin.get_url:
    #     url: "https://get.pulumi.com/releases/sdk/pulumi-{{ pulumi_version }}-linux-x64.tar.gz"
    #     dest: "/tmp/pulumi-{{ pulumi_version }}-linux-x64.tar.gz"
    #     mode: "0644"
    #   when: pulumi_installed is failed or pulumi_installed.stdout is not search(pulumi_version)

    # - name: Extract Pulumi to /usr/local/bin
    #   ansible.builtin.unarchive:
    #     src: "/tmp/pulumi-{{ pulumi_version }}-linux-x64.tar.gz"
    #     dest: /usr/local/bin
    #     extra_opts: [--strip-components=1]
    #     creates: /usr/local/bin/pulumi
    #   when: pulumi_installed is failed or pulumi_installed.stdout is not search(pulumi_version)

    # - name: Check if the targeted version of flyctl is installed
    #   ansible.builtin.command: flyctl version
    #   register: installed_flyctl_version
    #   ignore_errors: true
    #   changed_when: false

    # - name: Download flyctl tar.gz
    #   ansible.builtin.get_url:
    #     url: "https://github.com/superfly/flyctl/releases/download/v{{ flyctl_version }}/flyctl_{{ flyctl_version }}_Linux_x86_64.tar.gz"
    #     dest: "/tmp/flyctl_{{ flyctl_version }}_Linux_x86_64.tar.gz"
    #     mode: "0644"
    #   when: flyctl_version not in installed_flyctl_version.stdout

    # - name: Extract flyctl to /usr/local/bin
    #   ansible.builtin.unarchive:
    #     src: "/tmp/flyctl_{{ flyctl_version }}_Linux_x86_64.tar.gz"
    #     dest: "/usr/local/bin"
    #     remote_src: true
    #   when: flyctl_version not in installed_flyctl_version.stdout

    # - name: Install Flatpak packages
    #   community.general.flatpak:
    #     name:
    #       - com.obsproject.Studio
    #       - org.videolan.VLC
    #       - org.tenacityaudio.Tenacity
    #       - md.obsidian.Obsidian
    #       - org.gimp.GIMP
    #       - rest.insomnia.Insomnia
    #       - com.github.johnfactotum.Foliate
    #       - com.jetbrains.PyCharm-Professional
    #       - com.jetbrains.GoLand
    #       - org.gnome.meld
    #       - org.sqlitebrowser.sqlitebrowser
    #     state: present

    # - name: Ensure fonts directory
    #   ansible.builtin.file:
    #     path: "~{{ remote_regular_user }}/.fonts"
    #     state: directory
    #     mode: "0755"
    #     owner: "{{ remote_regular_user }}"

    # - name: Check if Jetbrains Mono exists
    #   ansible.builtin.shell: "ls ~{{ remote_regular_user }}/.fonts/JetBrainsMonoNerd*FontMono*"
    #   register: jetbrains_mono_exists
    #   ignore_errors: true
    #   changed_when: false

    # - name: Download Jetbrains mono
    #   when: jetbrains_mono_exists is failed
    #   ansible.builtin.unarchive:
    #     src: https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/JetBrainsMono.zip
    #     dest: "~{{ remote_regular_user }}/.fonts/"
    #     remote_src: true
    #     mode: "0755"
    #     owner: "{{ remote_regular_user }}"
